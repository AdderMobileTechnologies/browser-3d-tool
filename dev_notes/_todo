
TODO: 
1- move meta data files to dbdev.adder.io from localhost.
2- set up meta data index. 
#3- Get the 'sidebar' functionality for selecting meshes via button over image .
#4- Snap Shot FUnctionality and GridList
5- saving the design data, ie. as was done with 'userSession' in version 1 .
6- consider a "hasLoaded" method for models.



6- Figure out why Porsche Right door not getting image applied to it event though it has been added to the meta data and is editable.
   end of the trail is in 'AdderMeshWrapper:applyTextureFromDataURL()' 

(3) need a flag for showing billboard selection versus vehicle 
    background image 
    buttons that trigger mesh selection. 






 #done 
    renamed classes and class files to have a consistent prefix of adder.
    renamed mesh_ids in blender files and created new babylon files with the changed mesh names
    created the directory tree on the server for the ad_type,sub_type,detail,asset hierarchy.
    also renamed clickable meshes in same protocol. 
    changed meta data to match new files and naming conventions 
    changed meta files to house the 'pickable meshes' as a parameter array of mesh names. 
    created code to hide the sister meshes in the case of leftside_large, leftside_small,  where only one UVMapping structure is supposed to be visible.

fixed bugs:
# fixed: 9-10-2019 
   need to be able to change the image after a previous one has been applied. 
   billboard sign2 becomes invisible when picked ?  need somekind of flag for when to hide sister meshes....
# Server Issue: Cors: 
# The 'Access-Control-Allow-Origin' header contains multiple values '*, *', but only one is allowed.


new bugs:
! can not get the Design Name to clear when deleting the previous design, HOWEVER, when a new one is saved after the delete it gets the new default name while the old name is still on display.
# BUG: switching between the vehicles and then changing the leftside texture...NOT tracking mesh id appropriately.


9-12-2019 compartmentalizing sections of the UI iconControlGroup and overlayControls   
   - create input for design name.
   - create functionality for deleteing a design , asking for confirmation, removing screenshots, clearing localStorage, disposing of meshes...

   When trying to clear the slate on the Main file , most is working but the 'textInput' component is keeping its own state element for design name....
   Save and Delete are basically working.
*** go through and make sure 'let' is used instaed of 'var'  


   trying to find solution: https://stackoverflow.com/questions/38901106/how-to-make-a-shared-state-between-two-react-components
   * could just pull the input out of a subcomponent.


LEFT OFF HERE : Friday morning look into this.

how to do 'redo' and 'undo' 
   #1) - if a texture is 'applied to' a mesh then it needs to be 'un-applied'. 

   - if the camera is moved from position A to position B, then it might need to go back to position A.
   - if the Zoom Level changes, it might need to gpo back .


Brandons Explanation: 
2 columns  1) undo 2) actions 3) redo(later)
undo has objects:
   obj:{
      action:"",
      to:"",
      from:""
   }

actions: has object 
   obj:{
      action:"",
      to:"",
   }

Upon an 'Undo' pull off the last item on the undo stack ,
select appropriate inverse function, 
then pop it off the undo stack.
-----------------------------------
currently: no actions are getting saved until the user hits the 'save' functionality.
so change the name...for starters.
Main:callback_UITextInput()

*!*:: notes: one of two things: either at least one snapshot is needed before a save. OR . if no screenshot exists, take it automatically on save.
quick check to see how actionSave was done in v1
action defined in iconSave of old version like so...   design_obj.action = "final_save" 


_iconControlGroup.handleSaveClick() ..... design_obj.action = "final_save";

UNDO working pretty good HOWEVER... need to save the initial image before it gets applied as a texture... 
we might not have been doing this before...



Undo for screen name , applyingATexture, screenshots 

9-16-2019 

Merged into Master for Demo Purposes...

Missing Pieces:
   - can only select certain areas ie.left_side
   - do not have all the 'textured meshes' needed from 'Blender File' on down . ie. roof, trunk, hood ... 
   - porsche missing rear end piece.
   - user might want to change the position of a model , rotation, scale ?? 
   - user might want to change focal point of camera.

time to merge dev-bayon into master for a demo.
   1) The Meta_Data Server 
      at root level of repo, just needs to be implemented on the dbdev.adder.io server. 

   2) The 3d Tool 
      repo is up and merged with master . 
      

Left off with REDO .
@ UNDO...an item, instead of getting deleted, needs to go into the redo_array.


Check if The Right Side Selection of the porsche is similar to the meta data issue we dealt with last week with the billboards.

// for adderSceneWrapper 
getDefaultMaterialForMeshId(mesh_id) {
    let ModelsArray = this.getModels();
    let meshMat = null;
    for (let mIndex in ModelsArray) {
      let _model = ModelsArray[mIndex];
      let _meshWrappers = _model.getMeshWrappers();
      for (let mwIndex in _meshWrappers) {
        let _meshWrapper = _meshWrappers[mwIndex];
        let _mesh = _meshWrapper.getMesh();
        if (_mesh.id === mesh_id) {
          meshMat = _mesh.material;
          console.log("MESH MATERIAL DEFAULT gotten for mesh.id");
          return meshMat;
        }
      }
    }
    return meshMat;
  }
  applyMaterialToMeshId(mesh_id, material) {
    let ModelsArray = this.getModels();

    for (let mIndex in ModelsArray) {
      let _model = ModelsArray[mIndex];
      let _meshWrappers = _model.getMeshWrappers();
      for (let mwIndex in _meshWrappers) {
        let _meshWrapper = _meshWrappers[mwIndex];
        let _mesh = _meshWrapper.getMesh();
        if (_mesh.id === mesh_id) {
          _mesh.material = material;
          //or should we have a meshWrapper  setMaterial method ?
        }
      }
    }
  }

// I also had some of the redo working for design name....

//The environment.js file and the .gitignore 



  // TODO notes:
  
/*
Check if The Right Side Selection of the porsche is similar to the meta data issue we dealt with last week with the billboards.


When a mesh is selected for a change in texture , grab it's default material ie. mesh.material 
sidebarButtonClickAlt(args)   args.name or e.target.name = mesh.id 
so I'd use adderSceneWrapper to find meshWrapper and get the original material from it.

ie.
//adderSceneWrapper.getDefaultMaterialForMeshId(mesh_id)



undo_ApplyTextureToMesh


OR 

	var whiteMat = new BABYLON.StandardMaterial("whiteMat", scene);
	whiteMat.emissiveColor = new BABYLON.Color3(1, 1, 1);
   whiteSphere.material = whiteMat;

   environment.js file 

   .gitignore 


*/

// MAIN PROBLEM: The Modal Editor on and off behavior...
1) user selects a mesh modal pops up like supposed to.
2) user closes the modal, it pops up again by itself. 
3) user closes the second one,
4) now the modal is unresponsive to clicks and leaves the Open Image Editor button on the page.


start_editing is TRUE modal pops up 
chnage made in modal and 
AdderImageEditor.jsx
 onApplyClick() {
    //console.log(this.imageEditor.toDataURL({ format: "png" }));
    //data to apply to an image class of the current model/mesh.
    let DataURL = this.imageEditor.toDataURL({ format: "png" });
    this.onApplyCallback(DataURL);
  }


goes back to ...

MUI_DraggableDialog.jsx 
  <DialogContentText>
            <AdderImageEditor
              height={800}
              width={1000}
              mesh_id={props.mesh_id}
              onApplyCallback={handleImageEditorResults}
            />
          </DialogContentText>

which goes to ....

   const handleImageEditorResults = dataURL => {
    //Usage: Editing-Mesh

    props.imageEditorCallback(dataURL);
    setOpen(false);
  };

  /////////////////////////////////////////
  I have a hunch that I'm doing something wrong in regards to this...  setOpen true/false and React.useState.
  export default function DraggableDialog() {
  const [open, setOpen] = React.useState(false);

  const handleClickOpen = () => {
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
  };

Tuesday 9-17-2019 :
Plan:  Try to isolate anywhere the modal is opened or closed. 
Pay special attention to the strange callback .

icons to add : 
Tt is text_fields  
tT is format_size


914ac26dff4f6f352a3
--------------------------------------------------------------------
ICONS: 
https://github.com/FortAwesome/react-fontawesome

https://fontawesome.com/icons?d=gallery&q=save

$ yarn add @fortawesome/free-solid-svg-icons

import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faCoffee } from '@fortawesome/free-solid-svg-icons'

const element = <FontAwesomeIcon icon={faCoffee} />
--------------------------------------------------------------------

Wed. 9-18-2019 
bug: If user screenshots same exact image we get duplicate key errors, probably not an issue.

resizable box:
https://www.npmjs.com/package/react-resizable
$ npm install --save react-resizable

const Resizable = require('react-resizable').Resizable; // or,
const ResizableBox = require('react-resizable').ResizableBox;
 
// ES6
import { Resizable, ResizableBox } from 'react-resizable';
 
// ...
render() {
  return (
    <ResizableBox width={200} height={200} draggableOpts={{...}}
        minConstraints={[100, 100]} maxConstraints={[300, 300]}>
      <span>Contents</span>
    </ResizableBox>
  );
}
/* PROPS:
{
  children: React.Element<any>,
  width: number,
  height: number,
  // Either a ReactElement to be used as handle, or a function returning an element that is fed the handle's location as its first argument.
  handle: ReactElement<any> | (resizeHandle: 's' | 'w' | 'e' | 'n' | 'sw' | 'nw' | 'se' | 'ne') => ReactElement<any>,
  // If you change this, be sure to update your css
  handleSize: [number, number] = [10, 10],
  lockAspectRatio: boolean = false,
  axis: 'both' | 'x' | 'y' | 'none' = 'both',
  minConstraints: [number, number] = [10, 10],
  maxConstraints: [number, number] = [Infinity, Infinity],
  onResizeStop?: ?(e: SyntheticEvent, data: ResizeCallbackData) => any,
  onResizeStart?: ?(e: SyntheticEvent, data: ResizeCallbackData) => any,
  onResize?: ?(e: SyntheticEvent, data: ResizeCallbackData) => any,
  draggableOpts?: ?Object,
  resizeHandles?: ?Array<'s' | 'w' | 'e' | 'n' | 'sw' | 'nw' | 'se' | 'ne'> = ['se']
};
*/


ok. found and applied a resizable box to the screenshots. 
now to get them to expand with the box ... 

1:00pm 
Try to figure out the modal pop up issue. 
THESE are all direct clicks on the mesh itself. ..................
- create billboard , straight apply an image , all good. 
- click other side, straight apply image , all good. 
- open porsche, straighrt apply image, all good.
- apply to other side othe car straight image no problem , all good. 
- load the vw, apply straight image no problem .
- applied straight image to the otherside all good. 

NOW ... use the sidebar buttons. 
load the two sided billboard , add image with the one button select , works, but then 
-frozen can not select the other side of the billboard. with a 'direct click' BUT can select it with the other sidebar button
TRY again:
second time the sidebar button was frozen and ... I COULD click directly on sign two.

now select porsche , left side from sidebar apply image all good. BUT can NOT direct select the right side,
However if I use sidebar to select rightside it works ... 

conclusions:
1) definitely related to the sidebar buttons. 
2) there is an alternating aspect that works , while using the same method for 2 consecutive times fails on the second.

exceptions: 
2 consecutive direct clicks on the vw worked.

CHANGES: 

    this.sidebarButtonClickAlt. = this.sidebarButtonClickAlt.bind(this) 
     this.callback_WindowPickable = this.callback_WindowPickable.bind(this);

     try to eliminate the 'scp and scope' factors.

     AFTER callback_WindowPickable ,,, I needed to reset flag back to false. This fixed the back to back sidebar selection.
     HOWEVER, upon a direct click afterwards on billboard I get the 'double popup and freeze.' 


  Now repeated sidebar click s work until interrupted by a window click....

  on 'Apply Image' it is calling past the flag for isEditing... a third time. 

//==========================================================
  open a model 
  'direct click' 
  edit 
  apply image 
  * modal pops back up 
  close it 
  THEN it never opens again via 'direct click'  OR 'via' sidebar buttons .

The modal issue... based on a too lenient array of window click listening... certain clicked elements need to be filtered out for
specific actions such as the 'Apply Image' button in the modal . It shoudl have stopped any further editing.


Thursday:
Things I think might be good: 
1) have the camera focal point change to what ever got selected. 
2) be able to rotate the selected object  horizontal slider ? 
3) be able to reposition the selected model x,y,z 3 vertical sliders ?

Still To Do: 
1) undo and redo texture / material 
2) changing 'scene' between city and country
3) 

inspect undo and redo data in console: 
- actions array catches name changes, and puts them into redo_actions_array.
- actions tracks screenshots , and undoes them but does NOT redo them...Brandon said not to track screenshots though,...we'll have a delete button for them.
- texture:
  - issue: hitting the 'undo' button brought up the modal window.? then froze modal again.!
  -click on anywhere on the screen pulling up modal ? 

  NEXT: undo and redo chosen Model ?? 
   scope.save_UIAction(
          image_model.id,
          "screenshot",
          image_model,
          "empty screenshot"
        );

        Friday 9-20-2019 : 
        bug: at some point during the redo and undo of a porsch , with texture, to billboard , with two textures...
        undoing the 2nd texture on the billboard reveals an 'incorrect' texture on the billboard, what appears to be the texture 
        currently applied to the porsche. 

        solved. There needed to be a flag for a models initial load so that it could either get a default texture or the previous texture.
  
      now. Can we get the default texture, or do we have to apply a generic white dataURL. ? 
      (?) should we make 'original dataURL' part of a models meta data ?  NO there are a zillion different materials applied to a model. 
      we could apply the default material to all the selectable meshes...

      what if all the Blender models have the same starting default material. 


      Another Bug: 
        after adding screen shots ... at some point the undo function stopped working period.
        As soon as a screen shot was taken , the UNDO function stopped.


        console log errors: 
          * Failed Prop TYpe prop chidren marked as requiired...
          * AdderImageEditor validateDOMNesting  161, MUI_DraggableDialog 92, 

          BUG: if I load an image into the editor and then hit the 'close' button with out making an edit.... 

          Dialog: on close something like this with different arg :: props.imageEditorCallback(dataURL);


          BUG: save: no meshes are getting saved like they used to. They used to get saved everytime the user created a screen shot , 
          now that we are not doing it that way , figure out how. 
          Not seeing it. Now though it should happen when the asset is loaded.
           callback_Designer -> adderLoader.addSingleModel(adderAsset); ->  
           
           Actually...it should happen when a mesh is selected and edited.
           so on apply image. ( should I be saving the 'models' as well ...or is that redundant. )

           What exactly are we saving for the user ? 
            - Just the final image on screen? 
            - the ability to reload the deisgn project ? 

  send actions array to this in the data param to be saved ....???? 
  actions_array will be gotten from localstorage though instaed of from scope. 
  BUT it might need to be saved in state so that it can be accesses when params are sent to the iconControls otherwise, it could get pulled later...

               <IconControlGroup
                  callback_Save={this.iconSave}
                  callback_Save_v2={this.iconSave_v2}
                  callback_Delete={this.iconDelete}
                  callback_Redo={this.iconRedo}
                  callback_Save_Alt={this.iconSave_Alt}
                  callback_Share={this.iconShare}
                  callback_Undo={this.iconUndo}
                  data={{
                    designModel: scope.state.userSession.designModel,
                    designs: scope.state.userSession.designs
                    
                  }}
                ></IconControlGroup>



Friday Commit Messages:
- now 'redo and undo' of models is working.
- now undo redo appears to be working correctly for multiple models using a vareity of actions such as adding assets applying texture   
- some style changes on the image editor.
- fix bug when 'closing image editor without an edit', also some responsive design updates.
- added the actions_array to the 'save feature' as well as fixed style of the 'delete alert dialog'.
- repositioned lights cameras and modesl to make their default locations and limits please the eye.

Monday: 9-23-19
Debug: 
  - Upon delete, not all models were deleted from the screen. The Application data was though correctly. 
  - it appears to only get the last item/model that was added to the screen. 
  SOLVED:
  commit:
   "fixed the deletion method by gathering an array of user models as opposed to just the last model added."


BUG: The (Designer Selects are not always right on.!) ie. upon selection of 4door( after billboard and porsche have been added), 
automatically sets the value of 'stationwagon' instead of 'select'.
SOLVED: by wrapping functionality in Async Await clause.
 
Improvement: might just want to save image information in texture_images ( for textures applied to userModels) 
That way , duplicates of dataURL will not be stored in the 'actions' array, HOWEVER, that would require swapping out the image 
in actions array with an id, AND using the id in the texture_images array. 


* we just had to reset git because of some merge issues. Probably due to node_modules NOT getting ignored properly in .gitignore. 

BUG: issue with localStorage maximum capacity.... 
  - options:
    - reduce size of screen shot. 
    - limit size of input or compress imported images before using them or storing them. 
    - create our own limiting array of images to keep in history. 

    created a utility class to check localStorage capacity... 
    Can use it as a reference for when to act. 
    currently saving image data 3x  ... once(to and from though...) in actions array  , once in texture_images   , and again in 'save' function.

    WHERE: 
    texture_images 
      - Main.jsx -> imageEditorCallback()   goes only in to state.
      - iconSave_v2  ---no reason to save I don't think so I removed it from the save. 

  something I've done has broken seeing the image on undo...
  the images are still there on the redo so ... the 'from' value is getting set to 'empty dataURL' incorrectly during an exchange. 
  The issue revolves around the code that checks the state of editing....
Flags Related: 
  - editing_mesh_initial_load
 SOLUTION: fix the flag 'editing_mesh_initial_load' . still a bit unpredictable but appears to be happeing fairly consistently.
 -very first time on complete undo the first image does not get removed during its turn.  after that it works fine, maybe an async latency delay thing. 
 the last apply Image undo on billboard, failed to apply default texture and instead,
 applied one of the other textures.
 guess: ->   scope.undo_ApplyTextureToMesh(lastAction);

 The problem arises when a 'change action' of different type , contains a 'From' image dataURL , even if the change Action does NOT equal applyImageToMesh...it does. 
 so make a condition for only if action === aplyImage... not that easy. 
 NEED TO GET that flag back for a 'models' first image application. But can not get confused with different models.  

   //TODO: redo/undo image out od sync ...
        //and flag should get set to true when ever an asset is added to the screen. editing_mesh_initial_load

//The original idea that started all this was trying to reduce the number of times a dataURL got saved to once. 

9-23-2019: 4:50pm HUGE improvement on use of localStorage memory. 
STILL have issue with undo transition between two different action types, where the second model retains the last image of the first model, due to the linked list nature of our redo undo stacks."


fixed some bugs in the refreshing of the 'cascading selects',
 changed code to save image dataURLs only once with a unique id and then use the uuid to get the images when needed during the redo and undo processes, saves a ton on how much localStorage is getting used.


Tues: 9-24-2019 
babylon Tool Next steps(?): 
#- ability to change scenery 
    starts in the environment meta data. 
    looks like we might want a separate meta data file for different environments ...
        let adderMeta = new AdderMeta(this.state.adderSceneWrapper);
          adderMeta.getEnvironment(); //args: ie. 'environment1' , 'environment2'
      // would have to have a way to remove meshes of 'just' the previous environment. 
      //left off lookign at adderMeta , expecting to see the 'user added models' log out in the loop like the environment models do , but did not. 
-------------------------------------------------------------
- ability to download ( images or saved design json ... )
- deep dive into css 
- debug 
- the 'lock' icon 
- ability to rotate and change position of models 
    - would re-involve the babylon GUI .
    #- rotate:
    - position:
- blender models that account for hood, roof and trunk meshes. 
- 'share' icon ( do we need to set up an app on facebook , twitter, etc to push these to? )

* added a manifest file for the billbaord. 

Thur 9-26-2019 : 
on the table: changing scenes 
  Needs:
   # - some visual synchronicity for where the 'ad' models exist on both the 'city' and the 'country' scenes. 
   # - if I rotate the block 90 degrees clockwise I will have a straigt away road with a t-intersection to the left. 
     # - The construction site will be on the right 
     # - I will move the billboard to the right side of the straight away.
      #- the construction will need to get pushed to the right some amount.
     # - the rounded building will need to move to the opposite corner than it is on currently. 
     # - the other models will need to be adjusted as well. 
      
  other ongoing concerns: (listed above on Tue 9-24-2019)
  
Scene Change Bugs: 
  - billboard goes between scenes by itself ok. 
  - billboard and the vw disappear coming from 'country' to 'city'.
  - the glitch appears to happen when there is more than one model present. 
  # Solved i THINK.

 GUI adding parent.mesh in the AdderLoader file based on strategy from meta data. 

 GUI NOTES: 
  probably just need one grid to house all controls, curently adding one in the loader...
  
  //// EXAMPLE OF GRID WITH MULTIPLE PANELS : from : https://www.babylonjs-playground.com/#3VMTI9#0
TODAY: 
    -     rearranged models to adapt to both city and country scene settings. Also mainly fixed bug when losing user models inbetween scene changes.
    -     made sure no duplicates of dropped models were getting added to array. ( for environment change cleanup)
    -     added a class for handling  babylon GUI controls and utilized the strategy desgign pattern in meta data to trigger gui for parent meshes of models.
    -     successfully added sliders for rotating each of the current models.
    -     styling the sliders and making sure that left and right sliding mirrors the rotation direction.

Friday 9-27-2019:
#solved: BUG: IF scenery changes when NO User Model is on screen, the two scenes merge together . 
//#############################################################################################
Mon. 9-30-2019 

Start With these notes from last week.
- debug 
- ability to download ( images or saved design json ... and upload it?  )
- blender models that account for hood, roof and trunk meshes. 
- 'share' icon ( do we need to set up an app on facebook , twitter, etc to push these to? ) email ??? 
- deep dive into css 
- ability to rotate and change position of models 
    - would re-involve the babylon GUI .
    #- rotate:
    - position:
- the 'lock' icon 
//---------------------------------Tue: 10-01-2019
# -swap out lock icon with screen shot icon 
- swap out binoculars with a 'scene' icon ie. movie set scene...
# - hide Ed Jellico 
#- hide left overlay 
#- adjusted height and depth of road way in country scene
- get hood, roof, and trunk working for both vehicles. C:\Users\Bayon\projects\adder_creative_resources\blender_models\

      sudo mv x 
/var/www/html/assets/ad_type/vehicle/sub_type/4door/detail/stationwagon/
/var/www/html/assets/ad_type/vehicle/sub_type/2door/detail/sportscar


--Quick Bug Check: 
  
  #- SIDEBAR ISSUES: with billboard and with vehicles ? (!)  AND RESPONSVE collapse...
    #- loading image to billboard from sidebar to sign1 did NOT work ? ! 
    #- Logic issues were related to hard coded index for strategies...
    # - responsive: 
  #- select : when on Vehicle, changing from 2 door to 4 door , stationwagon is ALREADY selected...needed to be reset at some previous point.
    #- fixed...due to sub_type needed a reset like ad_type had.
  - REDO and UNDO - cause the GUI sliders to multiply.

 # - MANIFESTS: 
          #- StraightRoad.babylon 
          #- mount.blend1.babylon 
  #-CONSOLE ERRORS: 
          - prop 'children' error in MUI_Draggable, I believe it has to do with the HOC aspect of the 'Paper' object. 
          - validateDOMNesting(...):    <div> can not be descendant of <p>  AdderImageEditor or MUI_DraggableDialog 
        AdderImageEditor:160  ------>>>>>    <Row style={modalRowStyle}>
          p createdBy Typography
        MUI_DraggableDialog:80 ----------->>>>>>>>
        <Dialog
              children="none"
              open={open}
              onClose={handleClose}
              PaperComponent={PaperComponent}
              aria-labelledby="draggable-dialog-title"
              style={{ width: "96% ", marginRight: "auto", marginLeft: "auto" }}
            >
        forwardRef :
        https://reactjs.org/docs/forwarding-refs.html

- Re-define the users perspective: 
I'm a marketing agent for  a billboard company and I want to be able to visualize  a design to convince the owner of the company to use this 
companies advertising and data collection service. If I use this tool I can throw a few images together with different logos or advertisements  
displayed on the billboards , I can 'print them off', 'email them' , or 'share' them with my boss to help them visualize it as well. 
I want my 'billboard' to be the center of attention. and I need a result to share.   I'll want larger higher resolution images as well as the thumbnails in 
the slider. 
When I hit save or Download , do I care about uploading a previous design, or do I just care about the final image. 

--- 
ok I think 2 main things 
  1) change the focus to the selected item. 
  2) email a design to someone  
    - option: https://medium.com/ingenious/sending-emails-from-a-create-react-app-dad5756a4ff2 
    - option: https://www.freecodecamp.org/news/how-to-create-email-chips-in-pure-react-ad1cc3ecea16/ 
    - option: https://www.npmjs.com/package/react-multi-email 
    - option: https://sheelahb.com/blog/how-to-send-email-from-react-without-a-backend/

changing the target of a camera 
click on a mesh: 
Main.jsx -> callback_WindowPickable(mesh_id, caller) ... 
  1st you need the vector3 of the models parent mesh position.
    - get 'mesh parent' 
    - get 'mesh parent' vector3 position.

  then send it to the following function to change the focus.

  camera.settarget(new BABYLON.Vector3(30, 0, 0));

  //-------------------------------------------------------------------

 // in componentDidMount
  
        var button = document.getElementById('btn-download');
        this.setState({
            downloadButton: button,
        }) 
  
  iconSave_Alt() {
        
        let canvas = this.state.canvas;
        let dataURL = canvas.toDataURL('image/png');
        let button = this.state.downloadButton;
        button.href = dataURL;
        //TODO: save this to the user session as well.
        button.click();
    }

  <a
                        href="#"
                        className="button"
                        id="btn-download"
                        download="my-file-name.png"
                        style={{
                            opacity: "0"
                        }} >Download
                    </a>
    //------------------------------------------
  GIT ISSUES: I tried to fix the issue with the large file in api_assets dir but I cant seem to get it to clear. 

  OTHER MESHES: 
"ad_type/vehicle/sub_type/2door/detail/sportscar/porsche2.2.babylon",
"vehicle_2door_sportscar_hood_medium",
"vehicle_2door_sportscar_roof_medium",
"vehicle_2door_sportscar_trunk_medium"

 "filepath": "ad_type/vehicle/sub_type/4door/detail/stationwagon/vw_toureg-2.6.babylon",
"vehicle_4door_stationwagon_hood_medium",
"vehicle_4door_stationwagon_roof_medium",
"vehicle_4door_stationwagon_trunk_medium"

/var/www/html/assets/ad_type/vehicle/sub_type/4door/detail/stationwagon/

EOD: log:


MASKING: feature.

- detected a bug in hardcoded index for meta data strategy when reading whether a mesh is selectable or not.
- fixed the hard coded check for strategy replace with condition for strategy in loop.
- fix responsive css issue with vehicle sidebar buttons.
- fix the reset of details when sub_type changes on the designer selects for models.
- remove one of the warnings about componentWillReceiveProps
- worked on removing a lot of warnings from the console.
- added some code to try and change the target of the camera to the just selected model, not working yet and commented out.
- added the basic ability to download the main image
- remove directory with large files
- resolve some conflicts after removing large files in api_assets directory.
- added roof and trunk meshes for the vw 

LEFT OFF HERE : look into Masking Ability 
- convert a profile image of the vw into black and white 
  - pull it into Blender and try to apply it as texture.
  - will probably need to use a texture setting that contains the entire image.
  - download and install GIMP 

# solved * checkered texture on new hood and roof and trunk meshes?
basic particle emitter for rain effect 

-envato account ? 
line icons and 3D tool 

REMOVE from blender file: http://dbdev.adder.io/assets/c4d13e1ef5c20e49d7206aefff123f19--no-signal-tv-white-noise.jpg

Tuesday EOD Notes:
Todays Git Commits: 
- hid the left overlay controls and swapped out cmera icon for screenshots  instaed of lock icon in uppler left
- removed user info section
- adjusted height and depth of road way in country scene
- both vw and porsche have hood,roof,and trunk...porsche no trunk
- all sections on all vehicles are able to have texture applied and have correct default color coating.
- added simple particle system helper for rain effect
- added manifest files for the two new babylon model files
------------------------------------------------------------------------------------------------------------------------------

Wed 10-02-2019 
- get the 'scene' icon to replace the binoculars 

git_recovery_notes:
 
find dif between last commit:  NEW
 966279929e723b2774b5447bdb2a6b3739d1ef5b 

 and first Monday commit: OLD
 209e449c4d14e04a52307fdd60f843b0bf631d9b


https://stackoverflow.com/questions/3368590/show-diff-between-commits/51139381
git diff oldCommit..newCommit
 And if you need to get only files names (e.g. to copy hotfix them manually):

git diff k73ud dj374 --name-only


git diff 209e449c4d14e04a52307fdd60f843b0bf631d9b 966279929e723b2774b5447bdb2a6b3739d1ef5b --name-only

RESULTS: 
 
dev_notes/_todo
#
meta_data/design.meta
meta_data/environment.meta
meta_data/environment2.meta
#
src/assets/babylon_files/cocacola2.png
src/assets/babylon_files/porsche.rear.1.mtl
src/assets/babylon_files/porsche.rear.1.obj
src/assets/babylon_files/porsche2.2.1.babylon
src/assets/babylon_files/porsche2.2.1.glass.babylon
src/assets/babylon_files/porsche2.2.1.glass.log
src/assets/babylon_files/porsche2.2.1.log
src/assets/babylon_files/porsche2.2.1babylon.log
src/assets/babylon_files/vw_toureg-2.6.1.babylon
src/assets/babylon_files/vw_toureg-2.6.1.log
src/assets/babylon_files/vw_toureg-2.6.babylon
src/assets/babylon_files/vw_toureg-2.6.log
#
src/components/MUI_DraggableDialog.jsx
src/components/Main.css
src/components/Main.jsx
src/components/designer.jsx
src/components/subcomponents/MUIPopover.jsx
src/components/subcomponents/_overlayControlsUpperLeft.jsx
src/components/subcomponents/elements/UITextInput.jsx
#
src/constants.js
#
src/models/adderCamera.jsx
src/models/adderLoader.jsx
src/models/adderMeta.jsx
src/models/adderSceneWrapper.jsx

SO: copy files from the 'RESULTS' into the NEW repo branch 
everything has been replaced and committed, check to see results.

LOST: the mountains model ? 

MISSING IMAGES: 
"materials":[{"name":"porsche2_2_1.Material.006","id":"porsche2_2_1.Material.006",
tv-white-noise...
 exported to babylon here:
 C:\Users\Bayon\projects\adder_creative_resources\blender_models\porsche-911-carrera-4s\source\


 mv 
 ad_type/vehicle/sub_type/2door/detail/sportscar/
 sudo mv porsche2.2.1.babylon /var/www/html/assets/ad_type/vehicle/sub_type/2door/detail/sportscar/porsche2.2.1.babylon
                              /var/www/html/assets/ad_type/vehicle/sub_type/2door/detail/sportscar

// =====   EMAIL FUNCTIONALITY ===============================================================================
NODEMAILER_SMTP_HOST=smtp.gmail.com
NODEMAILER_SMTP_PORT=465
NODEMAILER_USER=no-reply@addermobile.com
NODEMAILER_PASS=Sharedacces$1

in web-api, under routes/v2/auth/register/driverMiddleware, line 153 has an example of how to use it

https://www.npmjs.com/package/nodemailer

WITH ATTACHMENTS: 
https://blog.mailtrap.io/sending-emails-with-nodemailer/

==========================================================================================================
1) created example mail_server.js and tested 100% 
2) create a subcomponent to gather email info.
  - use web_api code to make a version of the call to mail_server.js 
  - parameters: to, from , subject, html , attachments : [{filename:"",path:""}]

  - adapt meta_server.js to handle this email function. 
  - find and example calling meta server 



Email Remaining Concerns:
What needs to happen: 
I would want the user to be able to send an email and keep everything as it already is , so the user can keep on working on it if they choose to. 
If we have to we can store the actions temporarily and then rebuild the scene for them after they send the email and the page refreshes. 
Also, clicking the share button makes the email form appear, it also sets the 'latest on screen design' to the dataURL for the email. 
If it stays up for a while, and the user makes changes again before sending the email, the latest changes might not get added/updated to the dataURL.

SO ... can I load a scene based on the saveActions array? 
- upload actions to the server
      - ok but missing actual dataURLs only have uuid at the moment. need to gather up.
      loop through state._images and if match uuid get dataURL and add to 'save array'  WHERE? 


Wed. 10-02-2019 
- recover the latest work on a branch that got corrupted with a large file issue.
- recovery looks complete had to remove reference to an image in babylon file and update manifest
- update dev notes in _todo after recovery completed.
- added in basic ability to send emails via the meta_server with nodemailer.
- added the ability to email the lastest image on the screen as an attachment 
- add the movie scene icon to replace the binoculars.
- working on code to pull down a saved design and redisplay it


- run through the actions like a 'redo' 
- downloadSavedDesign
- totalRedo()

ISSUES: 
  - still having issues with an image related to the porsche I think, trying to get loaded over and over.
  - also uploading the dataURL didn't give me something I could look at on the server side, I think
   the json stringify messed. 


Thur 10-03-2019

Environment Variables:
 https://medium.com/the-node-js-collection/making-your-node-js-work-everywhere-with-environment-variables-2da8cdf6e786
 dot-env 
 .env 
 cons API = "http://foo.com"
 config.js 
  export module {

    init dotenv....

    API = process.env.API
  }
  //-----
  1st ADD .nv to your .gitignore and COMMIT 
  2nd THEN add the .env file 
  npm install dotenv

  // config.js
const dotenv = require('dotenv');
dotenv.config();
module.exports = {
  endpoint: process.env.API_URL,
  masterKey: process.env.API_KEY,
  port: process.env.PORT
};
// server.js
const { port } = require('./config');
console.log(`Your port is ${port}`); // 8626
////////////////////////////////////////////////////////////

Frid: 

adderGuiUtility.js model is where the rotation slider code is. 
0 - 1 - 2 

 carMeshSelectorTransparent

 Continous Download when on Porsche .
 does NOT happen the first time around after the manifest has been incremented. 
 I just removed a non existent img that was attached to a texture. 
 refresh
 THEN... it starts all over again.. trying to request http://dbdev.adder.io/assets/ 
 with nothing in particular 
 try to rename the manifest to break it . 
 ok now it can not find it. it takes 1.32 seconds to download the porsche model. 


 LEFT OFF HERE Fri: 10-04-2019


Added SavedDesignActions.js to .gitignore
 there appears to be an issue that relates to the manifest file for the porsche model so I turned it off for now.
 lost most of my git commit notes after having to do a hard reset to get ready to move to dbdev.adder.io 
 Realized that the the designs need a model class to keep them organized especially for the process of trying to download and reinstall 
 the design into the app. Did some research into the 'Babylonjs Inspector' when I was trying to figure out how I can get the rotation changes 
 from within the babylon scene, out to the react side of the code. It looks like something we might be able to utilize in the future 
 but I had issues trying to get it set up. There is some chatter about it on stackoverview.  

 Mon 10-07-2019:
 -# brighten toast icons 
    - no luck changing the 'svgs' 
    - was able to add contrast with darker bg color and lighter border.
    - sent svgs to Ian
 - more models
    - one sided  billboard 
    - parallel billboard
    - environment models ( ie. individuals from the city scape original?)
        - document process of getting models from blender original city scape. 
        open Blender 
        get file C:\Users\Bayon\projects\adder_creative_resources\blender_models\CITY_FBX_KC9\ " slice up  "
        select all meshes of a model and set them in a different layer view 
        select all ,but ONLY the meshes of the separated model
        file export > wavefront .obj  > 'Selection Only'
        import it into a brand new blender project.
        export it as a babylon file 
        mv file over to 3dtool assets 
          STOP: check the path to the image files used by the model point to CITY/ dir where they should already be stored.
            - do search for <"diffuseTexture":{"name":"> and replace with <"diffuseTexture":{"name":"CITY/>
        mv file up to server ~ your 'Home' directory with WinSCP or the equivalent
        sudo mv file to /var/www/html/assets/CITY/filename.babylon 
        and create a manifest file for it as well.
        then build a meta_data JSON for it within the environment meta data file you want it to be in.

        Trouble Shooting:
          * Some of the materials/textures are still missing. 
              - look for mesh ids in the babylon file 
                - found: KC9BG19_Untitled.071 
                - write a condition to look for it in the adder models...
                   - user adderSceneWrapper function to applyTextureToMesh   in this case... BG13w1
                  THIS DID NOT WORK: but the mesh appears to have an image texture and material applied to it.
                  went into blender searched for the mesh KC9BG19_Untitled.071 and found that it was attached to modern.jpg which,
                  was throwing a can not find error in the console. And I removed it from the texture definition.
                  did a new babylon export.
            * went back and removed modern.jpg from one and applied a default texture...still some missing textures but less obvious.

 - weather button for particles 
  - 1 just pick a weather icon I guess.
 - constrain or extend scene ? 
    -1 
    -2 add more city blocks(?) 
 - udate adder logo  - 
    - 1 
    - 2 

 - fix email input box issue
 - make the overlay containers more flexibile and uniform.

----- DID: 
increase the contrats in  image editor icons with darker bg color and a light border, was unable to effect the svg icons themselves.
extended the city scape in all directions and added in a few more models.
added a skyscraper but had some issues with materials and textures.
added a skyscraper and changed adder logo to one with angled text.
move some of the overlay controls to new locations and rewire dependencies.

//========================================================================================
Tuesday : start here . get Ian the svgs for TUI 
and revisit list from yesterday.

*note on Environment Models: they seem to be losing their texture somewhere along the line. 
 - fix email input box issue
    - 2 issues:
      - having a blank value="" prevented entering data into the :TO input.
      - google stopped liking the user and pass:
      Test enabling “Access for less secure apps” (which just means the client/app doesn’t use OAuth 2.0 - https://oauth.net/2/) for the 
      account you are trying to access.  It's found in the account settings on the Security tab, Account permissions (not available to accounts 
      with 2-step verification enabled):  https://support.google.com/accounts/answer/6010255?hl=en

 - make the overlay containers more flexibile and uniform.
 - adder logo quality (ok)
 - look into the images that Ian passed over to me yesterday. 
  - get the other icon set up for 'scene' 
 - try to nest a grid for the Babylon GUI as well to get more controll over sliders position.
- strange resizing behavior between the icon control group and the screenshots areas.
- remove white in grid list ... perhaps: .makeStyles-root-112{background-color:xxx}

- Babylon GUI improvements: https://doc.babylonjs.com/how_to/selector
      -- selection panel https://www.babylonjs-playground.com/#BXMTCD#1
      -- custom coolors: https://www.babylonjs-playground.com/#BXMTCD#3
      adderLoader:::   if (currentStrategy === "gui") { ::::
              results = adderGuiUtility.control_sliderWithHeader(
                mesh.parent,
                "billboard"
              );
              header = results[0];
              slider = results[1];
              adderGuiUtility.panel_Grid(advancedTexture, header, slider, 1);


 -DONE: 
  checked email setup ,needs auth, and fixed weather icon size and tranparency.
   change out the new icons and tweak their size and position.
  working on an advanced gui panel for control multiple aspects of a mesh/model 

LEFT OFF HERE: 
  on 2 branches: 
    bayon-oct4 
    slider-grids 

Thursday: 10-10-2019
Reflect: 
  - Masking ability.
  - Hide Show the Selection Panel 
       - observer design pattern to handle cross component communication better. 
       - Brandons existing method with 'trigger'
  - Better Particle Emitter Control 
  - brighten tui icons 
  - add more models 
  - constrain scene view .
 
 //Brandons Register Child Function
/////////--------------------------------------
// Registering a child components function with it's parent so that the parent can call the function when it needs to.
//<Parent>: ------------------
//- outside the constructor:

registerChildFunction(childFunction) {
    this.childFunction = childFunction;
}
callChildFunction(data) {
//call the registered function.
this.childFunction(data);
}
componentWillUnmount() {
this.childFunction = null;
}
//</Parent>

////<Child>: ------------------------
//- inside constructor:
    this.childFunction = this.childFunction.bind(this);
    props.registerChildFunction(this.childFunction);

//- outside the constructor 
childFunction(data) {}

//////-</Child> --------------------------------------------

rxjs: 
https://jasonwatmore.com/post/2019/02/13/react-rxjs-communicating-between-components-with-observable-subject
https://github.com/cornflourblue/react-rxjs-communicating-between-components

rxjs works beautifully! 
now to apply it to the hide/show sectionPanel:
  - need an icon.
  - transfer current fn from rain icon over to new icon. 
  - in the rxjs callback inside the ...?adderGuiUtility?...or other.. perform hide show.
    - will probably require turn a flag on and off in state. 
    (?) how will it handle multiple selection panels at same time? 
    it layers them on top of each other and the hide/show only works for the 1st created selectionPanel. 

create a separate icon for selectionPanel. 



Thursday: 10-10-2019
decided to try the RxJS library for observer pattern, and used it to hide/show the selection panel for 
adjusting a models x,z positions and y rotation.
boiled rxjs down to bare essentials for the purpose of handling ui status change update.
rxjs set up notes
I have the show hide functionality working with rxjs observer pattern, its messy and needs to be cleaned up , but it works.
added an icon gear for the selection panel hide show in the upper right as well as sorted out the logic for hide show from the old icon.

Friday 10-11-2019 
find all circumstances where the selection panel should be hidden. 
  - ie. when a different model is selected. 
  - automatically if the user tries to do a screenshot, so that it does not appear in the image.
    -did not work: although it hid the selection panel it wasn't quick enough to avoid the screenshot. revisit.
  - METHOD TO REMOVE SELECTIONPANEL:
      removeGroup(groupNb: number): void 
      to be called when a new model is created.
          how to detect when new model is created. ?
          how to re-open selection panel after it was removed ? 
  - set motion limit constraints.
 - back and forth between models the gear loses it's parent. 
 - add panel to station wagon too. 
 /*
---------------RE-add to model ---------------------
import AdderGuiUtility from "./adderGuiUtility";
let scene = adderSceneWrapper.getScene();
let asw = adderSceneWrapper;
  adderGuiUtility.easy_selection_panel(
    scene,
    advancedTexture,
    mesh.parent
  );
-------------------------------------------
*/
How is the GUI part of babylon working now.
  - each model has a strategy for 'gui' if it is to have one. 
  - when those models are loaded in the 'adderLoader' the selection panel is assigned to them as 'invisible'. 
  - if there are more than one panel open ...
    - they still effect the appropriate model 
    - but, the hide/show gear only works for the top panel. 
    
    other desired functionality:
    - when a model is selected, close all other panels . I can close them , but I can't open them back up. 
    possible solutions:
    instead of a gear: have an icon for each model ? (would get messy fast.)
    
    another idea was to have the draggable dialog on click of model, then instead of going directly to the editor, 
    make the editor one of the choices in addition to the selection panel. 
    then the selection panel itself would have a close button. 

- # BUG: another obvious bug is WHERE the thumb button on the slider is when you move it.
- # BUG: initial click on Gear Icon is NOT displaying it. 
- *true, using slider.displayThumb = false; does NOT hide the thumb as expected. 
- # so far , I haven't had any luck with setting the min and max values of the sliders either.


// ===========================================================================
Mon: 10-14-2019 

'selection panel' 
  -should change owner whenever model is clicked.(Does Not).

  Big Picture: 
    I. file: 'adderGuiUtility'
       Has the function 'easy_selection_panel' which takes in a
        'scene,advancedTexture,mesh,and adderSceneWrapper'.
         INNER FUNCTIONS:
        It contains a couple of 'Inner Functions' that handle ...
        'rotation, degrees value, size, getting status of UI ,
        listens forvalue change which handles visibility,
        changes in position, 
        It also has functions that accumulatively build the selection panel,
        from 'groups', which are home to 'controls' ie. sliders.
        The sliders consists of a label as well so it is referred 
        to mainly as a 'selector'
        Each selector is 'drilled down into' via the DOM to control style aspects.  
        Which is potentially problematic in terms of maintaining proper relationships.
        

//Thought: seems like if we made the selection panel a class, and then made that class a 'member' of 
say the 'adderModel' or 'adderMeshWrapper' class, then we'd have greater control over the relationship and behavior.
So, turn the 'easy_selection_panel' into a class.
Then, when it is created, or at least propogated in the 'adderLoader' class, which is 
coincidentally in the middle of creating and defining a new meshWrapper class,
just assign it as a member of the MeshWrapper class.
Then, the benefit would be, instead of the 'adderLoader' creating a sort of 'one-off' during 
load, it would be creating a new class member which could be triggered at will.

The 'AdderMeshWrapper' currently is constructed with 3 parameters,
a mesh, position, and rotation. The 'mesh' is the only 'required' parameter.
Amd the only substantial method outside the setter and getters in 
a method for 'applying Texture From DataURL'.
Now this is specific to each 'mesh' so I have erred in my logic. 

The 'selection panel' needs to be a member of the 'AdderModel' class.
It receives the following parameters, 'adderSceneWrapper,modelFile,
parentMesh,position,rotationAxis,rotationAngle,meshWrappers,sclaing,
and behavior'. 

The 'parentMesh' and the 'sceneWrapper'  are 2 of the 4 params needed 
to create the 'selection panel' . Only 2 left are 'scene' and 'advancedTexture'.
Aside from the getter and setter methods, the only substantial method 
is for setting the parent mesh rotation. 

Question where and how is the model class being created. 
Currently the only place an 'adderModel' gets instantiated is in the
'adderLoader' class during the 'addSingleModel' method.

This 'method' gets called from 'Main.jsx' during the 
'loadScene' method. As well as, inside the 'adderMeta' class.
The difference being, adderMeta handles 'ALL' meshes , where the 
'loadScene' method only gets called for 'Selected' ad type models, 
our targets. 

So it works like this. The loadScene sends an 'adderAsset' to the adder Loader 
 addSingleModel method. Which incidentally gets the other 2 parameters 
 we need, scene and advancedTexture from the 'asw' . Then the 'adder loader' 
 class uses the meta data to create the appropriate parameters for the 
 'adder model' and it is then instantiated. It is then 'loaded' along with all its 
 individual mesh members. And also, a 'parentMesh' is derived from its internal 
 methods and the 'position', and 'rotation' are applied to it. 

 So, inside the adderLoader , add single model method, the parameters we 
 need for a selection panel that we have are...
 reminder: scene,advancedTexture,mesh,and adderSceneWrapper,
 In here we already have 1) scene, 2) advancedTexture 3) adderSceneWrapper AND 
 the 'parentMesh' . Only , we get the parent mesh 'after' the model has been,
 instantiated. 


// ===========================================================================
Mon: 10-14-2019 

'selection panel' 
  -should change owner whenever model is clicked.(Does Not).

  Big Picture: 
    I. file: 'adderGuiUtility'
       Has the function 'easy_selection_panel' which takes in a
        'scene,advancedTexture,mesh,and adderSceneWrapper'.
         INNER FUNCTIONS:
        It contains a couple of 'Inner Functions' that handle ...
        'rotation, degrees value, size, getting status of UI ,
        listens forvalue change which handles visibility,
        changes in position, 
        It also has functions that accumulatively build the selection panel,
        from 'groups', which are home to 'controls' ie. sliders.
        The sliders consists of a label as well, so it is referred 
        to mainly as a 'selector'
        Each selector is 'drilled down into' via the DOM to control style aspects.  
        Which is potentially problematic in terms of maintaining proper relationships.
        

//Thought: seems like if we made the selection panel a class, and then made that class a 'member' of 
say the 'adderModel' or 'adderMeshWrapper' class, then we'd have greater control over the relationship and behavior.
So, turn the 'easy_selection_panel' into a class.
Then, when it is created, or at least propogated in the 'adderLoader' class, which is 
coincidentally in the middle of creating and defining a new meshWrapper class,
just assign it as a member of the MeshWrapper class.
Then, the benefit would be, instead of the 'adderLoader' creating a sort of 'one-off' during 
load, it would be creating a new class member which could be triggered at will.

The 'AdderMeshWrapper' currently is constructed with 3 parameters,
a mesh, position, and rotation. The 'mesh' is the only 'required' parameter.
Amd the only substantial method outside the setter and getters in 
a method for 'applying Texture From DataURL'.
Now this is specific to each 'mesh' so I have erred in my logic. 

The 'selection panel' needs to be a member of the 'AdderModel' class.
It receives the following parameters, 'adderSceneWrapper,modelFile,
parentMesh,position,rotationAxis,rotationAngle,meshWrappers,sclaing,
and behavior'. 

The 'parentMesh' and the 'sceneWrapper'  are 2 of the 4 params needed 
to create the 'selection panel' . Only 2 left are 'scene' and 'advancedTexture'.
Aside from the getter and setter methods, the only substantial method 
is for setting the parent mesh rotation. 

Question where and how is the model class being created. 
Currently the only place an 'adderModel' gets instantiated is in the
'adderLoader' class during the 'addSingleModel' method.

This 'method' gets called from 'Main.jsx' during the 
'loadScene' method. As well as, inside the 'adderMeta' class.
The difference being, adderMeta handles 'ALL' meshes , where the 
'loadScene' method only gets called for 'Selected' ad type models, 
our targets. 

So it works like this. The loadScene sends an 'adderAsset' to the adder Loader 
 addSingleModel method. Which incidentally gets the other 2 parameters 
 we need, scene and advancedTexture from the 'asw' . Then the 'adder loader' 
 class uses the meta data to create the appropriate parameters for the 
 'adder model' and it is then instantiated. It is then 'loaded' along with all its 
 individual mesh members. And also, a 'parentMesh' is derived from its internal 
 methods and the 'position', and 'rotation' are applied to it. 

 So, inside the adderLoader , add single model method, the parameters we 
 need for a selection panel that we have are...
 reminder: 

 * - scene, advancedTexture, mesh, and adderSceneWrapper,

 In here we already have 1) scene, 2) advancedTexture 3) adderSceneWrapper AND 
 the 'parentMesh' . Only , we get the parent mesh 'after' the model has been,
 instantiated. 
 The way this works, is that if a 'null' parentMesh parameter 
 is sent to the adderModel during construction, one is 
 created for it during construction. So , if we can extract that, and apply it in adderLoader before instantiating an adderModel, 
 we will have what we want, which is a 'selectionPanel' as a 
 method or property of an adderModel. 
 ok. 
 So now the plan is to, 
 1) create a 'AdderSelectionPanel' class. 
2) build it in the 'Adder Loader' class during 'add single model'
method. 
3) Then add the 'selection panel' as a parameter, to the 'adder model'
class.
4) Then how do we trigger the 'hide/show' aspect of the panel, and how do we apply the 
selection panel changes to the model?  
5) we will want to know if the model itself 'is the currently selected model'. 
Another property that needs to be added to the 'adderModel'
IF we were to send the 'scene' and 'advancedTexture' into the adderModel class,
we could construct the selection panel inside the model...but do we want to pass those 
kinds of things into the model....not really.


OTHER aspects that are needed for the 'selectionPanel' class.
import React from "react";
import * as BABYLON from "babylonjs";
import * as GUI from "babylonjs-gui";

 this.state = {
      selectionPanel: {},
      mesh: {},
      y_previous: 0,
      z_previous: 0,
      x_previous: 0
    };

Status: Everything is hooked up 'Class wise' ;
now to use it instead of the adderGuiUtility. 
1) a model is added to the scene. 
2) click the gear and silence. 
    -> Main-> iconGear() 
    which uses state to set 'isVisibleSelectionPanel' 
    and to 'sendMessage()' for RxJS . 

    -> in the 'sendMessage() ' method 
    based on the state...true, or false, 
    sends message of either "true" or "false" on to RxJS. 

    messageService: 
    was getting registered in the adderGuiUtility  class.... 
  ie. 
  import { messageService } from '../_services';  
  and then the set up code: runs in the 'componentDidMount' 

  THEN in the render of Designer  const {messages} = this.state.
  <Grid> {messages.map((message,index) => <div></div>),scope.rxjsCallback()}</Grid>

  WHICH IN TURN: 
  scope.rxjsCallback()
  SO ... 
  AdderGuiUtility 
  has the listener code: 
    <Grid> {messages.map((message,index) => <div></div>),scope.rxjsCallback()}</Grid>
  AND the rxjsCallback(msg)  which depending of "true" or "false" 
  sets the selectionPanelVisibilityAccordingly. 

  SO: we are back to the question of whether the AdderSelectionPanel can 'extend' 
  the React.Component ? otherwise find an alternative ... like 
  setting up the rxjs in the getAdderSelectionPanel method .. 
  or just use a state variable somehow else. : ? 

So the rxjs elements are (5): 
1) the import 
2) the setup  ---> appears to already be in original  selectionPanel.
3) the unmount / unsubscrribe 
4) the callback rxjs that ultimately performs the change.
5) the HTML element that 'maps through the messages'.

OK. the import is in the class. 
the setup is in the getAdderSelectionPanel method.
  along with the ' map through messages element'
  the rxjsCallback is set up like a class method 
  and the 'unsubscribe' method is added to the class as well. 
(? will it work ? )

iconGear: is setting true or false
the rxjs callback is listening in adderGuiUtility
 
 not getting to the class. 
 think it might be necessary to extend react.component to listen to 
 state changes. 

 NOT yest listening for rxjs. 

What if I by-pass the rxjs for now. How would that work. 
The 'panel' class needs to be able to listen for changes in the UI, of 
a subcomponent. 

The main difference between the 'panel class' and the 'guiUtility' appropach , is 
that the guiUtility is a react component and does NOT receive 
constructor parameters. 

What if I boil the 'adderGuiUtility' down to the bare functionality that I want. 
Then see if that can act as the class as opposed to the selectionPanel class.

how is it used. 
1) gets imported in adderLoader
instantiated as a stand alone and then 
easy_selection_panel called with scene,aTexture, & parentMesh 


//rethinking the use of adderGuiUtility: 

it is both a react component and a special function that excepts 
specific parameters ....MAINLY the 'mesh.parent'. 

The react part listens for the Rxjs  messages  and it currently gets 
instantiated in the adderLoadr async mesh... 

OK GuiLite is boiled down version 
1) used in adderLoader during async import of meshes..
2) has a hook in Main.jsx 

can I assign this to an adder model instead of the other class I tried. ? 
What is the difference between adding during mesh async load and singleModelLoad ? 

Ok... so back to the way it was working... 
can I get an ID of some kind to go along with the rxjs. ? 

=================================
can turn on off selectionPanel for each model separately. 
But I can't get them back once I've selected another.
Why can't I use the same mechanism that loadst the image editor. ? 

Main.jsx -> callback_WindowPickable(mesh_id, caller) 

triggers the 'startEditing' which shows/hides the modal. 

instantiating the selectionPanels upon selection of a model ... is more intuitive.. 
in some ways but you have to deal with the pop up. 
(?)
 :

I could have a button like the one in the modal 'Apply Image' that closes the window, 
except I'll call it 'position your model' and it could 'hide/show' the 
appropriate 'iconGear' for that model ? 

onApplyClick
  -> onApplyCallback
    ->  onApplyCallback={handleImageEditorResults}
      -> setOpen(false);
      -> props.imageEditorCallback(dataURL);
        -> Main.jsx -> imageEditorCallback()
      
it would have to hide show the gear icon. open ...
 they are two different things one is the 'model' the other is 
 the 'specific mesh' that was clicked....


The iconGear could appear with the appropriate sidebar. 

  BUG: I would expect 'when you click on a new model, that the sidebar would 
  change to the appropriate model.
What triggers the sidebar differences. ? 
this.state.selected_ad_type 
However , different vehicles share the same sidebar so that's another obstacle. 
*manually closing selectionPanel.
when clicking on either the "designer selectors" or  "a different mesh" 
then the selectionPanel should hide.
So, what is triggering it...on iconGear that I could use? 

 if (scope.state.isVisibleSelectionPanel) {
      scope.sendMessage();
      scope.setState({
        isVisibleSelectionPanel: false
      });
    }

    what if I place this code at windowPick
does not 'really' get rid of the previous 
  but if I add this ///clearCurrentPanel: true 
  how about, "true", "false", "clear" 
  maybe...
  "dispose() to remove the selection panel ?  " 
  this.state.selectionPanel.dispose(); IS NOT A FUNCTION error! 
  https://doc.babylonjs.com/api/classes/babylon.gui.selectionpanel#dispose really? 
  * I guess because I have the selectionPanel stored as a state variable it somehow can not access its methods? 

DID: 
Trying to build a class that cna merge the 'React.Component' class characteristics of having and tracking state, 
while as well as trying to create an ensulated class for a 'BABYLON.SelectionPanel' , reason being so that it can listen for 
the rxjs messages that are sent out within the state scope of components. Or at least that is how it seems, becasue I 
was not able to get a regular class to hear the rxjs messages. In summary I'm trying to find a way to make a selection panel that controls 
the position and rotation of particular models but that knows when to disappear and let another model take over. I need a change in model, to 
change the owner of the 'selection panel' as well, or to at least 'hide' the selection panel so that the new models selection  panel can appear.

Tue 10-15-2019

Ok. So reviewing yesterdays work,
- I overlooked the rxjs aspect during my initial set up logic. 
- I ran into problems determining whether a 'mesh' or a 'model' is the desired target. 
- I reverted to a 'boiled down' version of the adderGuiUtility and called it guiLite. 
- What is happening is, 'guiLite' is used by each model during 'loading process' to create separate 'selection panels' that are hidden until clicked. 
  - 
- I believe there may be a way to use the 'name' property of a selectionPanel to control it individually. 
Let's get after it. 
- current state of behavior:
  - you can use the selectionPanel ONLY on the model when you first add it. If you hide it. And if you do not insert another model, first without utilizing it. 
  - If you do not hide the first models panel, then insert another model, you can access both by hide showing the 'second' models panel, BUT, you can not hide the 
  first models panel, AND they are actually 'LAYERED' on top off each other. 


  (?) What if I could just create 1 selectionPanel. Then, depending 
  on which current model is selected it binds to that model. 
  It would have to be instantiated differently. Without 
  the parent mesh, up front. 

  I think it is already added in Main, so lets see if I can get it without a model. 
  well we are hearing the rxjs messages, but not seeing the panel. 
  "git save at safe spot" 
  1) stop loader version of instantiation with comments. 
2) move the parameters over as props instead of constructor params. 
3) define the props parameters:
  when and where? 
  Main.jsx -> componentDidMount() -> setState before engine loop.
ok.
Now at correct time...add these to state.
currentParentMesh: {},
currentParentMeshName: {},
(?) at DesignerCallback ? : 
Can I get a parentModel back as return for 'addSingleModel' ?  YES.

ok. working, but I need to update state for model change. 
and state needs to update 'selectionPanel'

What if  I had an array of guiLite selection panels that were sent back to Main.
Ten maybe I could remove them when creating another? 


For some reason , state is not getting updated when I check at rxjs callback:

Can I send child scope back to Parent scope to be managed. ? 

we are now manageing array of selection panels... 
the trick now is to name them properly and hide show them  appropriately. 

THE next step: is to figure out WHO the parent model is NO MATTER WHICH MESH gets picked. 
THEN...run it through the remote functions MATCHING clause...  
  1) at pickableMesh....in main. 
  2) at sidebar button click 


  //PROBLEM hiding some of the panels: 

  What if instead of returning the 'selectionPanel' , 'easy' returns the parameters for 
  the selectionpanel , we use the parameters  to make or destroy panel when we want. 
  ??? 

Did: 
Continued work on the selectionPanels , sending child scope back to parent  and trying to use a child functionto 
hide show the selectionPanels. It appears to be working fairly well but there are some bugs that I can't figure out yet.

Wed 10-16-2019 : 
Review yesterday: I created an array to save each panel in and was trying to use the 'currently selected model name' to checkfor existing panels, 
and either hide show existing or create new one if necessary. Problem was the second panel , even though there was a match, and it was directed to 'hide',
it did not. 
Also, the panels are set up to 'hide' when a new model is inserted. That works for all three models. so that's good. 
The problem comes in when trying to reselect an existing model. 
Currently selecting a model involves 'selecting a 'mesh' , not a model.', then getting the parent mesh/model for it. 
What happens is the 'Image editor' pops up as well, BUT currently the last selected panel for the last model is on screen AND the 
'just selected ' panel is 'underneath' it in the layers. 
Good surprise is that on selecting a station wagon, it goes back to normal. BUT selecting the porsche and adding an image did NOT apply the image.although it 
did load the appropriate panel. Actually it loaded the image on the other side of the car...freak accident probbably clicking through the window...
So...in conclusion the problem seems to be isolated to either the 'billboard' or the 'first inserted model' hav9ing the bug of not hiding the previous panel appropriate.ly.
And it appears to be 'the first loaded panel' is where the bug is.
ok. Let's get after it. 
Where is the first panel getting created and why is it behaing differenetly than the others. ? 
one gets created right in the constructor , probably the problem area. 
The other possibility is that of the 'render' method. Which should not load until the first parent model is verified.
The guiLite that is instantiated in the constructor is the one that is used in the childFunction...later. 
ie. callChildFunction(data)...
  -> which gets called in the 'loadScene' method. One red flag is that appears to be called outside of the condition that the first
  parent model is loaded. Neither 'before', 'after' or 'none' solved or interrupted the bug/function.
  check at the constructor. Now it appears that nothing is even calling the childFuntion. callChildFunction(data)
  commented it out completely to no effect. Removing it from the constructor as well had no effect. 
  Now 'GuiLite' is only imported so far as it is needed to exist as a sub component. 
  So this is the only code in Main.jsx that is getting used in relationship to it. 
   <Grid>
          {this.state.currentModelParent_isLoaded && (
            <GuiLite
              scene={this.state.scene}
              advancedTexture={this.state.advancedTexture}
              currentModelParent={this.state.currentModelParent}
              currentModelParentName={this.state.currentModelParentName}
              //REMOVE:UNSED:-> registerChildFunction={this.registerChildFunction}
              get_gLiteScope={this.get_gLiteScope}
               //REMOVE:UNSED:-> add_selectionPanel={this.add_selectionPanel}
            ></GuiLite>
          )}
        </Grid>
      }
*gLiteScope: is getting used in main.jsx to...
showExistingMatch: in 'imageEditorClose',
'loadScene' to call remoteFunction...
why is it calling 'remoteFunction' during loadScene? 
the remoteFunction is designed to 'check for a match' and handle appropriately either hide/show or create.
test:dev: DO  NOT CALL remoteFunction and see results: 
  -> looks like it does NOT create the new panel. does NOT hide previous panel.
Hypothesis: if we pass a desired 'method' to the remote function , then we should have a hook into the child compmonent for various purposes.
This works however I discovered that remoteFunction only gets called for the 'additionally created models' not for the initial model. 
DEV: conclusion: this(remoteFunction) is only getting called for the 'additional' selection panels that are getting added.
      //So, how is the first panle getting created.
So, GuiLite, must be creating the inital panel with props passed in initially. So in componenet did mount, the easy_selection_panel method gets called,
and maybe it is not getting added to the array to be checked. 
It gets called the same way as in remoteFunction  so when it continues to the 'manage' function something is afoot.
Actually, no, there is a difference in its inputs ...
didMount inputs       : props,props,state,props
remote function inputs: scope,scope,data,data 

changed didMount inputs to all 'state' vars.
THEN. ERROR in the 'remoteFunction' method::: TypeError: Cannot read property 'name' of undefined
easy fix just name parameter appropriately... 
another ERROR: :::  line 371 TypeError: Cannot read property 'position' of undefined
the error only occurs on the 'additionally loaded models? ' 
I think we just need to move the call to remote function to where after the modelParent has been async desfinined in state.

OK. it appears that gLiteScope has not yet been gathered at the tiime of calling the first 'remoteFunction' call during loadScene.
and we were consequently sending an undefined object to the remote function....on the second go round.
OK . showExistingMatch(existing_name) appears to be doing what it is supposed to. 
showExistingPanel: hide others:
guiLite.jsx:154 showExistingPanel:HIDE:  ad_type/billboard/sub_type/2sides/detail/angled/Billboard.v1.1.babylon
guiLite.jsx:154 showExistingPanel:HIDE:  ad_type/vehicle/sub_type/4door/detail/stationwagon/vw_toureg-2.6.1.babylon
guiLite.jsx:165 showExistingPanel:SHOW:  ad_type/billboard/sub_type/2sides/detail/angled/Billboard.v1.1.babylon
setting the isVisible property appropriately ... IT IS NOT actually changing the property. 

What if instead of hide show I dispose or create ? 
ok. almost there trying the dispose and create vs the hide and show approach... 
whatever the case , the first model does not appear to be getting added to the array of managed Models. 

It is not created in the callback_windowPickable or the second call to the 'remoteFunction'.

So I'm trying to change the logic to dispose and create ...I'm getting infinite loops in relation to the array_panels .
It happens after a click on the billboard mesh. On clicking a mesh, it calls the checkExistingPanels.... 
Finally got the panel beast under control... 


Next TODO: 
make sure the 'sidebar' updates with the selected model. 
1) get ad_type from  parentModel info

2) just need to change this to 0 or 1 depending on ad_type 
this.state.selected_ad_type

ok that works but came across a bug: 
×
Main.jsx 677 TypeError: Cannot read property 'getParentMesh' of undefined

 sidebarButtonClickAlt(args) {
    //Purpose: save new mesh to array of meshes in state
    // I do not need to save meshes in this manner anymore.
    this.callback_WindowPickable(args.name, "sidebarButtonClickAlt");
  }

Start Here Tomorrow: 
ASW getModelForMeshId  

